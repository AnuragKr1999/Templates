=================================================================================================================
LOWER BOUND
===============

// find the first element >= value in range[start, end-1] in arr
// if element is not found then return the length of the array
// start index = included
// end index = excluded
public static int lowerBound(int[] arr, int start, int end, int value) {
    int n = arr.length;
    int ans = n;
    int low = start;
    int high = end-1;
    while(low <= high) {
        int mid = low + (high-low)/2;
        if(arr[mid] >= value) {
            ans = mid;
            high = mid-1;
        } else {
            low = mid+1;
        }
    }
    return ans;
}
===========================================================================================================================================
UPPER BOUND
==============


// find the first element > value in range[start, end-1] in arr
// if element is not found then return -1
// start index = included
// end index = excluded

public static int upperBound(int[] arr, int start, int end, int value) {
    int n = -1;
    int ans = n;
    int low = start;
    int high = end-1;
    while(low <= high) {
        int mid = low + (high-low)/2;
        if(arr[mid] <= value) {
            low = mid+1;
        } else {
            ans = mid;
            high = mid-1;
        }
    }
    return ans;
}
