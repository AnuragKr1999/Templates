{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Scanner object creation": {
		"prefix": "scan",
		"body": [
			"Scanner sc = new Scanner(System.in);",
			"int n = sc.nextInt();",
			"$0"
		],
		"description": "To create object of Scanner class"
	}
	,
	"Import Statement": {
		"prefix": "import",
		"body": [
			"$0",
			"import java.util.*;",
			"import java.io.*;",
			"import java.lang.Math.*;"
		],
		"description": "To create import statement"
	}
	,
	"Test Cases Input": {
		"prefix": "test",
		"body": [
			"Scanner sc = new Scanner(System.in);",
			"int test = sc.nextInt();",
			"while(test-- > 0) {",
			"\tint n = sc.nextInt();",
			"\t$0",
			"}"
		],
		"description": "To create scanner class object and take input for test cases"
	}
	,
	"Main Function": {
		"prefix": "main",
		"body": [
			"static FastReader fr = new FastReader();",
			"static BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));",
			"public static void main(String[] args) throws IOException {",
			"\tint test = fr.nextInt();",
			"\twhile(test-- > 0) {",
			"\t\tsolution();",
			"\t}",
			"\tout.flush();",
			"}\n",
			"public static void solution() {",
			"\tint n = fr.nextInt();",
			"\t$0",
			"}",
			"\n\n\n\n",
			"static class FastReader {",
			"\tBufferedReader br;",
			"\tStringTokenizer st;",
			"\n",
			"\tpublic FastReader() { br = new BufferedReader(new InputStreamReader(System.in)); }",
			"\tString next() {",
			"\t\twhile (st == null || !st.hasMoreElements()) {",
			"\t\t\ttry {",
			"\t\t\t\tst = new StringTokenizer(br.readLine());",
			"\t\t\t} catch (IOException e) {",
			"\t\t\t\te.printStackTrace();",
			"\t\t\t}",
			"\t\t}",
			"\t\treturn st.nextToken();",
			"\t}",
			"\n",
			"\tint nextInt() { return Integer.parseInt(next()); }",
			"\n",
			"\tlong nextLong() { return Long.parseLong(next()); }",
			"\n",
			"\tdouble nextDouble() { return Double.parseDouble(next()); }",
			"\n",
			"\tString nextLine() {",
			"\t\tString str = \"\";",
			"\t\ttry {",
			"\t\t\tstr = br.readLine();",
			"\t\t} catch (IOException e) {",
			"\t\t\te.printStackTrace();",
			"\t\t}",
			"\t\treturn str;",
			"\t}",
			"}",

		],
		"description": "Creates main function, creates FastReader class (for fast input), creates object of FastReader and input for test cases"

	}
}
